<!DOCTYPE html>
<html lang="en">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<head>
  <title>!!indiv_id Phylogic Report</title>
  <script src="https://code.jquery.com/jquery-1.10.2.js"></script>
  <script src="https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.css">
  <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.js"></script>
  <script src="https://d3js.org/d3.v5.js"></script>
  <link rel="stylesheet" type="text/css" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.sample_name_table", {

        options: {
          columns: [],
          sample_names: [],
          sample_aliases: [],
          sample_dates: [],
          pie_plots: []
        },

        _elements: {
          table: undefined
        },

        _create: function() {
          let columns = this.options.columns;

          let table = d3.select(document.createElement("table"))
            .attr("class", "table table-bordered hover");

          let col_width = function (i) {
            switch (columns.length) {
              case 4:
                switch (i) {
                  case 0:
                    return "width:45%;";
                  case 1:
                    return "width:20%;";
                  case 2:
                    return "width:15%;";
                  case 3:
                    return "width:20%;";
                  default:
                    return "";
                }
              case 3:
                switch (i) {
                  case 0:
                    return "width:60%;";
                  case 1:
                    return "width:20%;";
                  case 2:
                    return "width:20%;";
                  default:
                    return "";
                }
              case 2:
                return i ? "width:20%;" : "width:80%;";
              default:
                return "";
            }
          };

          table.append("thead")
            .selectAll("td")
            .data(columns)
            .join("td")
            .attr("style", (_, i) => col_width(i) + " font-weight:bold; font-size: 12px")
            .html((_, i) => columns[i]);

          let row_elements = [];
          for (let i in this.options.sample_names) {
            let cols = 0;
            let row_str = d3.select(document.createElement("td"))
              .attr("style", col_width(cols) + " font-size: 12px")
              .html(this.options.sample_names[i])
              .node().outerHTML;
            cols++;
            if (this.options.sample_aliases.length) {
              row_str += d3.select(document.createElement("td"))
                .attr("style", col_width(cols) + " font-size: 12px")
                .html(this.options.sample_aliases[i])
                .node().outerHTML;
              cols++;
            }
            if (this.options.sample_dates.length) {
              row_str += d3.select(document.createElement("td"))
                .attr("style", col_width(cols) + " font-size: 12px")
                .html(this.options.sample_dates[i])
                .node().outerHTML;
              cols++;
            }
            if (this.options.pie_plots.length) {
              let td = d3.select(document.createElement("td"))
                .attr("style", col_width(cols));
              td.append("img")
                .attr("src", "data:image/png;base64," + this.options.pie_plots[i]);
              row_str += td.node().outerHTML;
            } else {
              row_str += d3.select(document.createElement("td"))
                .attr("style", col_width(cols))
                .html("Run BuildTree to display")
                .node().outerHTML;
            }
            row_elements.push(row_str);
          }

          table.append("tbody")
            .selectAll("tr")
            .data(row_elements)
            .join("tr")
            .html((_, i) => row_elements[i])
            .attr("style", "cursor: pointer;")
            .attr("class", "active-sample")
            .attr("onclick", "$(\"#sample-name-table\").sample_name_table(\"toggle_sample\", this)");

          this._elements.table = table.node();

          this._refresh()
        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.table.outerHTML;
        },

        toggle_sample: function(row) {
          if (row.className === "active-sample") {
            row.className = "removed-sample";
          } else {
            row.className = "active-sample"
          }
        }

      });

      $("#sample-name-table").sample_name_table(!!sample_name_table_options)
    });
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.clustering_plot", {

        options: {
          xlabels: [],
          time_points: [],
          cluster_dict: {},
          width: 500,
          height: 400,
          margins: {top: 20, right: 50, bottom: 35, left: 50}
        },

        _elements: {
          time_points: undefined,
          time_scaled_plot: undefined,
          time_agnostic_plot: undefined,
          t: undefined,
          n: undefined,
          y: undefined,
          tooltip_t: undefined,
          tooltip_n: undefined,
          plot_top: undefined,
          plot_left: undefined,
          plot_1d: undefined
        },

        _create: function() {
          if (this.options.time_points.length > 0) {
            this._elements.time_points = this.options.time_points;
          } else {
            this._elements.time_points = [...Array(this.options.xlabels.length).keys()];
          }

          let real_time = false;
          for (let i in this._elements.time_points) {
            if (parseInt(i) !== this._elements.time_points[i]) {
              real_time = true;
              break;
            }
          }

          const xlabels = this.options.xlabels,
            time_points = this._elements.time_points,
            cluster_dict = this.options.cluster_dict,
            width = this.options.width,
            height = this.options.height,
            margins = this.options.margins;

          if (xlabels.length > 1) {
            let t = d3.scaleLinear()
              .domain([Math.min(...time_points), Math.max(...time_points)])
              .range([margins.left, width - margins.right]);

            let n = d3.scaleLinear()
              .domain([0, xlabels.length - 1])
              .range([margins.left, width - margins.right]);

            let y = d3.scaleLinear()
              .domain([0, 1])
              .range([height - margins.bottom, margins.top]);

            let xAxis_t = g => g
              .attr("transform", "translate(0 " + (height - margins.bottom).toString() + ")")
              .call(d3.axisBottom(t));

            let xAxis_n = g => g
              .attr("transform", "translate(0 " + (height - margins.bottom).toString() + ")")
              .call(d3.axisBottom(n).tickValues([...Array(xlabels.length).keys()]).tickFormat(d => xlabels[d]));

            let yAxis = g => g
              .attr("transform", "translate(" + margins.left.toString() + " 0)")
              .call(d3.axisLeft(y));

            let line_t = d3.line()
              .x(d => t(d.t))
              .y(d => y(d.y));

            let line_n = d3.line()
              .x(d => n(d.n))
              .y(d => y(d.y));

            let time_scaled_plot = d3.select(document.createElement("svg"))
              .attr("baseProfile", "full")
              .attr("viewBox", "0 0 " + width + " " + height)
              .attr("version", "1.1")
              .attr("xmlns", "http://www.w3.org/2000/svg")
              .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
              .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")
              .attr("overflow", "visible")
              .attr("onmousemove", "$(\"#clustering-plot\").clustering_plot(\"show_value\", event, this)")
              .attr("onmouseleave", "$(\"#clustering-plot\").clustering_plot(\"hide_value\")")
              .style("display", real_time ? "block" : "none")
              .style("max-height", "450px");
            time_scaled_plot.append("g")
              .call(xAxis_t);
            time_scaled_plot.append("g")
              .call(yAxis);
            time_scaled_plot.append("text")
              .attr("x", (width + margins.left - margins.right) / 2)
              .attr("y", height - 5)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("Time");
            time_scaled_plot.append("text")
              .attr("transform", "rotate(-90 10 " + ((height + margins.top - margins.bottom) / 2).toString() + ")")
              .attr("x", 10)
              .attr("y", (height + margins.top - margins.bottom) / 2)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("CCF(x)");

            let time_agnostic_plot = d3.select(document.createElement("svg"))
              .attr("baseProfile", "full")
              .attr("viewBox", "0 0 " + width + " " + height)
              .attr("version", "1.1")
              .attr("xmlns", "http://www.w3.org/2000/svg")
              .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
              .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")
              .attr("overflow", "visible")
              .attr("onmousemove", "$(\"#clustering-plot\").clustering_plot(\"show_value\", event, this)")
              .attr("onmouseleave", "$(\"#clustering-plot\").clustering_plot(\"hide_value\")")
              .style("display", real_time ? "none" : "block")
              .style("max-height", "450px");
            time_agnostic_plot.append("g")
              .call(xAxis_n);
            time_agnostic_plot.append("g")
              .call(yAxis);
            time_agnostic_plot.append("text")
              .attr("x", (width + margins.left - margins.right) / 2)
              .attr("y", height - 5)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("Samples");
            time_agnostic_plot.append("text")
              .attr("transform", "rotate(-90 10 " + ((height + margins.top - margins.bottom) / 2).toString() + ")")
              .attr("x", 10)
              .attr("y", (height + margins.top - margins.bottom) / 2)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("CCF(x)");

            for (let cluster in cluster_dict) {
              let cluster_data_t = [];
              let cluster_data_n = [];
              let fill_data_t1 = "";
              let fill_data_t2 = "";
              let fill_data_n1 = "";
              let fill_data_n2 = "";

              for (let sample in cluster_dict[cluster].ccf_hat) {
                let r = cluster_dict[cluster].ccf_low.length - sample - 1;
                cluster_data_t.push({
                  t: time_points[sample],
                  y: cluster_dict[cluster].ccf_hat[sample]
                });
                cluster_data_n.push({
                  n: sample,
                  y: cluster_dict[cluster].ccf_hat[sample]
                });
                fill_data_t1 += t(time_points[sample]).toString() + "," + y(cluster_dict[cluster].ccf_high[sample]).toString() + " ";
                fill_data_t2 += t(time_points[r]).toString() + "," + y(cluster_dict[cluster].ccf_low[r]).toString() + " ";
                fill_data_n1 += n(sample).toString() + "," + y(cluster_dict[cluster].ccf_high[sample]).toString() + " ";
                fill_data_n2 += n(r).toString() + "," + y(cluster_dict[cluster].ccf_low[r]).toString() + " ";

                time_scaled_plot.append("circle")
                  .attr("fill", cluster_dict[cluster].color)
                  .attr("stroke", "none")
                  .attr("r", 7)
                  .attr("opacity", 1.0)
                  .attr("cx", t(time_points[sample]))
                  .attr("cy", y(cluster_dict[cluster].ccf_hat[sample]));

                time_agnostic_plot.append("circle")
                  .attr("fill", cluster_dict[cluster].color)
                  .attr("stroke", "none")
                  .attr("r", 7)
                  .attr("opacity", 1.0)
                  .attr("cx", n(sample))
                  .attr("cy", y(cluster_dict[cluster].ccf_hat[sample]));
              }

              time_scaled_plot.append("path")
                .datum(cluster_data_t)
                .attr("fill", "none")
                .attr("stroke", cluster_dict[cluster].color)
                .attr("stroke-width", cluster_dict[cluster].line_width)
                .attr("opacity", 0.5)
                .attr("d", line_t);

              time_agnostic_plot.append("path")
                .datum(cluster_data_n)
                .attr("fill", "none")
                .attr("stroke", cluster_dict[cluster].color)
                .attr("stroke-width", cluster_dict[cluster].line_width)
                .attr("opacity", 0.5)
                .attr("d", line_n);

              time_scaled_plot.append("polygon")
                .attr("points", fill_data_t1 + fill_data_t2)
                .attr("fill", cluster_dict[cluster].color)
                .attr("stroke", "none")
                .attr("opacity", 0.2);

              time_agnostic_plot.append("polygon")
                .attr("points", fill_data_n1 + fill_data_n2)
                .attr("fill", cluster_dict[cluster].color)
                .attr("stroke", "none")
                .attr("opacity", 0.2);
            }

            this._elements.time_scaled_plot = time_scaled_plot.node();
            this._elements.time_agnostic_plot = time_agnostic_plot.node();
            this._elements.t = t;
            this._elements.n = n;
            this._elements.y = y;
            this._elements.tooltip_t = time_scaled_plot.append("g")
              .attr("style", "display: none;");
            this._elements.tooltip_n = time_agnostic_plot.append("g")
              .attr("style", "display: none;");
          } else {
            let max_bin = 0,
              n_bins;
            for (let c in cluster_dict) {
              max_bin = Math.max(max_bin, ...cluster_dict[c].ccf_dist);
              n_bins = cluster_dict[c].ccf_dist.length
            }
            let x = d3.scaleLinear()
              .domain([0, 1])
              .range([margins.left, width - margins.right]);

            let y = d3.scaleLinear()
              .domain([0, max_bin]).nice()
              .range([height - margins.bottom, margins.top]);

            let xAxis = g => g
              .attr("transform", "translate(0 " + (height - margins.bottom).toString() + ")")
              .call(d3.axisBottom(x));

            let yAxis = g => g
              .attr("transform", "translate(" + margins.left.toString() + " 0)")
              .call(d3.axisLeft(y));

            let plot_1d = d3.select(document.createElement("svg"))
              .attr("baseProfile", "full")
              .attr("viewBox", "0 0 " + width + " " + height)
              .attr("version", "1.1")
              .attr("xmlns", "http://www.w3.org/2000/svg")
              .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
              .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")
              .attr("style", "max-height: 450px");
            plot_1d.append("g")
              .call(xAxis);
            plot_1d.append("g")
              .call(yAxis);
            plot_1d.append("text")
              .attr("x", (width + margins.left - margins.right) / 2)
              .attr("y", height - 5)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("CCF(x)");
            plot_1d.append("text")
              .attr("transform", "rotate(-90 10 " + ((height + margins.top - margins.bottom) / 2).toString() + ")")
              .attr("x", 10)
              .attr("y", (height + margins.top - margins.bottom) / 2)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("Probability density");

            let zero_str = Array(n_bins).fill(0).reduce(
              (a, c, i) => a + " " + x((n_bins - i - 1) / (n_bins - 1)).toString() + "," + y(0).toString(), " "
            );

            plot_1d.selectAll("polygon")
              .data(Object.keys(cluster_dict))
              .join("polygon")
              .attr("points", d =>
                cluster_dict[d].ccf_dist.reduce(
                  (a, c, i) => a + " " + x(i / (n_bins - 1)).toString() + "," + y(c).toString(), ""
                ) + zero_str
              )
              .attr("fill", d => cluster_dict[d].color)
              .attr("opacity", 0.5)
              .attr("stroke", "none");

            this._elements.plot_1d = plot_1d.node()
          }

          this._refresh();
        },

        _refresh: function() {
          if (this.options.xlabels.length > 1) {
            this.element.context.innerHTML = this._elements.time_scaled_plot.outerHTML + this._elements.time_agnostic_plot.outerHTML;
          } else {
            this.element.context.innerHTML = this._elements.plot_1d.outerHTML;
          }
        },

        switch_plot: function() {
          if (this._elements.time_scaled_plot.style.display === "none") {
            this._elements.time_scaled_plot.style.display = "block";
            this._elements.time_agnostic_plot.style.display = "none";
          } else {
            this._elements.time_scaled_plot.style.display = "none";
            this._elements.time_agnostic_plot.style.display = "block";
          }

          this._refresh();
        },

        show_value: function(eve, plot) {
          let {width, height} = plot.getBoundingClientRect(),
            mouse_pos_x = eve.layerX * this.options.width / width,
            mouse_pos_y = eve.layerY * this.options.height / height,
            cluster_dict = this.options.cluster_dict;

          let tooltip,
            x,
            i,
            p;

          if (this._elements.time_scaled_plot.style.display === "none") {
            tooltip = this._elements.tooltip_n;
            let scale_x = this._elements.n;
            i = Math.round(scale_x.invert(mouse_pos_x));
            x = scale_x(i);
            p = "n";
          } else {
            tooltip = this._elements.tooltip_t;
            let scale_x = this._elements.t;
            let x_s = scale_x.invert(mouse_pos_x);
            let t = this._elements.time_points.reduce((a, c) => (Math.abs(c - x_s) < Math.abs(a - x_s) ? c : a));
            i = this._elements.time_points.indexOf(t);
            x = scale_x(t);
            p = "t";
          }

          let text = [this.options.xlabels[i]],
            active_clusters = [];
          for (let c in cluster_dict) {
            text.push(cluster_dict[c].ccf_hat[i].toString() + " (" + cluster_dict[c].ccf_low[i].toString() +
            "-" + cluster_dict[c].ccf_high[i].toString() + ")");
            active_clusters.push(parseInt(c));
          }

          tooltip
            .attr("style", "display: block;")
            .attr("transform", "translate(" + x.toString() + "," + mouse_pos_y.toString() + ")");

          let border = tooltip.selectAll("path")
            .data([null])
            .join("path")
              .attr("fill", "white")
              .attr("stroke", "black");

          let text_el = tooltip.selectAll("text")
            .data([null])
            .join("text")
            .attr("id", "tooltip-text_" + p)
            .attr("font-size", "9px")
            .call(t => t
              .selectAll("tspan")
              .data(text)
              .join("tspan")
                .attr("x", 0)
                .attr("y", (_, i) => (i * 1.1).toString() + "em")
                .style("font-weight", (_, i) => i ? null : "bold")
                .style("fill", (_, i) => i ? cluster_dict[active_clusters[i - 1]].color : "black")
                .text(d => d));

          this._refresh();

          let {y, width: w, height: h} = $("#tooltip-text_" + p)[0].getBBox();

          text_el.attr("transform", "translate(" + (-w / 2).toString() + "," + (15 - y).toString() + ")");
          border.attr("d", "M" + (-w / 2 - 10).toString() + ",5H-5l5,-5l5,5H" +
            (w / 2 + 10).toString() + "v" + (h + 20).toString() +
            "h-" + (w + 20).toString() + "z");

          this._refresh();
        },

        hide_value: function() {
          this._elements.tooltip_t.attr("style", "display: none;");
          this._elements.tooltip_n.attr("style", "display: none;");

          this._refresh();
        },

        download: function() {
          let dl_link;
          if (this.options.xlabels.length === 1) {
            dl_link = "data:text/plain;charset=utf-8," + encodeURIComponent(this._elements.plot_1d.outerHTML);
          } else if (this._elements.time_scaled_plot.style.display === "none") {
            this.hide_value();
            let time_agnostic_plot = this._elements.time_agnostic_plot.cloneNode(true);
            time_agnostic_plot.removeAttribute("onmousemove");
            time_agnostic_plot.removeAttribute("onmouseleave");
            dl_link = "data:text/plain;charset=utf-8," + encodeURIComponent(time_agnostic_plot.outerHTML);
          } else {
            this.hide_value();
            let time_scaled_plot = this._elements.time_scaled_plot.cloneNode(true);
            time_scaled_plot.removeAttribute("onmousemove");
            time_scaled_plot.removeAttribute("onmouseleave");
            dl_link = "data:text/plain;charset=utf-8," + encodeURIComponent(time_scaled_plot.outerHTML);
          }
          let dl = document.createElement("a");
          document.body.appendChild(dl);
          dl.setAttribute("href", dl_link);
          dl.setAttribute("download", "!!indiv_id" + ".clustering_plot.svg");
          dl.click();
        },

        _destroy: function() {
          this.element.context.innerHTML = "";
        }

      });

      $("#clustering-plot").clustering_plot(!!clustering_plot_options)
    });
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.time_switch", {

        options: {show: true},

        _elements: {time_switch: undefined, input: undefined},

        _create: function() {
          if (this.options.show) {
            let time_switch = d3.select(document.createElement("label"))
              .html("Time-scaled");
            this._elements.input = time_switch.append("input")
              .attr("type", "checkbox")
              .attr("checked", "")
              .attr("onclick", "$(\"#time-switch\").time_switch(\"switch_plot\")")
              .node();

            this._elements.time_switch = time_switch.node();

            this._refresh()

          }
        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.time_switch.outerHTML;
        },

        is_checked: function() {
          if (this.options.show) {
            return this._elements.input.hasAttribute("checked")
          }
          return true
        },

        switch_plot: function() {
          if (this.is_checked()) {
            this._elements.input.removeAttribute("checked");
          } else {
            this._elements.input.setAttribute("checked", "");
          }
          $("#clustering-plot").clustering_plot("switch_plot");

          this._refresh();
        }

      });

      $("#time-switch").time_switch(!!time_switch_options)
    });
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.cluster_switches", {
        options: {
          cluster_dict: {},
          time_points: [],
          xlabels: []
        },

        _elements: {
          active_clusters: [],
          svg_switches: undefined
        },

        _create: function() {
          let cluster_dict = this.options.cluster_dict,
            svg_layout = d3.select(document.createElement("svg"))
              .attr("baseProfile", "full")
              .attr("version", "1.1")
              .attr("xmlns", "http://www.w3.org/2000/svg")
              .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
              .attr("xmlns:xlink", "http://www.w3.org/1999/xlink");
          for (let c in cluster_dict) {
            this._elements.active_clusters.push(c);
          }
          svg_layout.attr("viewBox", "0 0 120 " + ((this._elements.active_clusters.length + 2) * 30));
          svg_layout.selectAll("rect")
            .data(this._elements.active_clusters)
            .join("rect")
            .attr("class", "active-cluster")
            .attr("style", "cursor: pointer;")
            .attr("cluster", (_, i) => i + 1)
            .attr("x", 0)
            .attr("y", (_, i) => i * 30 + 30)
            .attr("width", 20)
            .attr("height", 20)
            .attr("fill", d => cluster_dict[d].color)
            .attr("stroke", "none")
            .attr("opacity", 0.8)
            .attr("onclick", "$(\"#cluster-switches\").cluster_switches(\"toggle_cluster\", this)");
          svg_layout.selectAll("text")
            .data(this._elements.active_clusters)
            .join("text")
            .attr("x", 30)
            .attr("y", (_, i) => i * 30 + 45)
            .attr("fill", d => cluster_dict[d].color)
            .text(d => d + " (" + Object.keys(cluster_dict[d].muts).length.toString() + ")");
          svg_layout.append("text")
            .attr("x", 0)
            .attr("y", 15)
            .attr("font-size", "11.5px")
            .text("Cluster (# variants)");

          this._elements.svg_switches = svg_layout.node();

          this._refresh();
        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.svg_switches.outerHTML;
        },

        toggle_cluster: function(cluster_switch) {
          let c = cluster_switch.getAttribute("cluster"),
            cluster_dict = this.options.cluster_dict,
            active_clusters = this._elements.active_clusters,
            cluster_dict_subset = {};
          if (cluster_switch.getAttribute("class") === "active-cluster") {
            cluster_switch.setAttribute("class", "removed-cluster");
            cluster_switch.setAttribute("opacity", 0.2);
            for (let i in active_clusters) {
              if (active_clusters[i] === c) {
                active_clusters.splice(i, 1);
                break;
              }
            }
          } else {
            cluster_switch.setAttribute("class", "active-cluster");
            cluster_switch.setAttribute("opacity", 1.0);
            active_clusters.push(c);
          }
          for (let i in active_clusters) {
            let active_cluster = active_clusters[i];
            cluster_dict_subset[active_cluster] = cluster_dict[active_cluster];
          }
          let clustering_plot = $("#clustering-plot");
          clustering_plot.clustering_plot("destroy");
          clustering_plot.clustering_plot({
            xlabels: this.options.xlabels,
            time_points: this.options.time_points,
            cluster_dict: cluster_dict_subset});
          if (!$("#time-switch").time_switch("is_checked")) {
            clustering_plot.clustering_plot("switch_plot");
          }
        }
      });

      $("#cluster-switches").cluster_switches(!!cluster_switches_options)
    })
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.tree", {

        options: {
          patient: "",
          child_dict: {},
          dist_from_parent: {},
          cluster_dict: {}
        },

        _elements: {
          svg_tree: undefined,
          tooltip: undefined
        },

        _create: function() {
          const patient = this.options.patient,
            child_dict = this.options.child_dict,
            dist_from_parent = this.options.dist_from_parent,
            cluster_dict = this.options.cluster_dict;

          let angles = [];
          for (let i in [...Array(72)]) {
            angles.push(Math.PI * i / 72);
          }

          let svg_tree = d3.select(document.createElement("svg"))
            .attr("baseProfile", "full")
            .attr("version", "1.1")
            .attr("xmlns", "http://www.w3.org/2000/svg")
            .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
            .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")
            .attr("overflow", "visible")
            .attr("style", "max-height: 520px;")
            .attr("width", this.element.context.parentNode.getBoundingClientRect().width);

          svg_tree.append("g")
            .append("text")
              .attr("x", -20)
              .attr("y", 40)
              .attr("text-anchor", "end")
              .attr("font", "Arial")
              .attr("font-size", "20px")
              .html(patient);

          let branch_cont = svg_tree.append("g"),
            node_cont = svg_tree.append("g"),
            node_label_cont = svg_tree.append("g"),
            branch_label_cont = svg_tree.append("g");

          let x_start = 0,
            y_start = 0,
            x_end = 0,
            y_end = 0,
            x_min = 0,
            y_min = 0,
            x_max = 0,
            y_max = 0;
          node_cont.append("ellipse")
            .attr("cx", x_start)
            .attr("cy", y_start)
            .attr("rx", 24)
            .attr("ry", 24)
            .attr("stroke", "white")
            .attr("fill", "blue")
            .attr("stroke-width", 0)
            .attr("opacity", 1.0);
          node_label_cont.append("text")
            .attr("font", "Arial")
            .attr("font-size", "14px")
            .attr("x", 0)
            .attr("y", 4)
            .attr("text-anchor", "middle")
            .attr("fill", "white")
            .html("normal");

          let next_clusters = child_dict[null],
            i = 0,
            existing_nodes = {null: [0, 0]},
            existing_edges = [],
            parents = {};
          for (let child in next_clusters) {
            parents[next_clusters[child]] = null;
          }

          while (i < next_clusters.length) {
            let c = next_clusters[i];
            for (let child in child_dict[c]) {
              parents[child_dict[c][child]] = c;
            }
            let edge_len = Math.min(200, Math.max(30, 400 * dist_from_parent[c])),
              angle_tilt = 0;
            if (i === 0) {
              angle_tilt = Math.PI / 2;
              x_end = x_start + edge_len * Math.cos(angle_tilt);
              y_end = y_start + edge_len * Math.sin(angle_tilt);
            } else {
              [x_start, y_start] = existing_nodes[parents[c]];
              let min_intersects_an_edge = true,
                max_closest_edge_distance_sq = 0,
                max_closest_neighbor_sq = 0;
              for (let a in angles) {
                let ang = angles[a],
                  x0 = x_start + edge_len * Math.cos(ang),
                  y0 = y_start + edge_len * Math.sin(ang);
                let intersects_an_edge = false,
                  closest_edge_distance_sq = Infinity,
                  closest_neighbor_sq = Infinity;
                for (let edge_idx in existing_edges) {
                  let edge = existing_edges[edge_idx],
                    a = x0 - edge[0],
                    b = y0 - edge[1],
                    c = edge[2] - edge[0],
                    d = edge[3] - edge[1],
                    p = (a * c + b * d) / (c * c + d * d),
                    xx,
                    yy,
                    cp1 = c * (y_start - edge[3]) - d * (x_start - edge[2]),
                    cp2 = c * (y0 - edge[3]) - d * (x0 - edge[2]),
                    cp3 = (x0 - x_start) * (edge[1] - y0) - (y0 - y_start) * (edge[0] - x0),
                    cp4 = (x0 - x_start) * (edge[3] - y0) - (y0 - y_start) * (edge[2] - x0);
                  if (p < 0 || (c === 0 && d === 0)) {
                    xx = edge[0];
                    yy = edge[1];
                  } else if (p > 1) {
                    xx = edge[2];
                    yy = edge[3];
                  } else {
                    xx = edge[0] + p * c;
                    yy = edge[1] + p * d;
                  }
                  let edge_dist_sq = (x0 - xx) * (x0 - xx) + (y0 - yy) * (y0 - yy);
                  closest_edge_distance_sq = edge_dist_sq < closest_edge_distance_sq ? edge_dist_sq : closest_edge_distance_sq;
                  intersects_an_edge = (cp1 * cp2 < 0) && (cp3 * cp4 < 0) ? true : intersects_an_edge;
                }
                for (let node_idx in existing_nodes) {
                  let node = existing_nodes[node_idx],
                    node_dist_sq = (x0 - node[0]) * (x0 - node[0]) + (y0 - node[1]) * (y0 - node[1]);
                  closest_neighbor_sq = node_dist_sq < closest_neighbor_sq ? node_dist_sq : closest_neighbor_sq;
                }
                if (~intersects_an_edge && min_intersects_an_edge) {
                  min_intersects_an_edge = false;
                  max_closest_edge_distance_sq = closest_edge_distance_sq;
                  max_closest_neighbor_sq = closest_neighbor_sq;
                  angle_tilt = ang;
                  x_end = x0;
                  y_end = y0;
                } else if ((~intersects_an_edge && ~min_intersects_an_edge) || (intersects_an_edge && min_intersects_an_edge)) {
                  if (closest_edge_distance_sq > max_closest_edge_distance_sq) {
                    max_closest_edge_distance_sq = closest_edge_distance_sq;
                    max_closest_neighbor_sq = closest_neighbor_sq;
                    angle_tilt = ang;
                    x_end = x0;
                    y_end = y0;
                  } else if ((closest_edge_distance_sq === max_closest_edge_distance_sq) && (closest_neighbor_sq > max_closest_neighbor_sq)) {
                    max_closest_neighbor_sq = closest_neighbor_sq;
                    angle_tilt = ang;
                    x_end = x0;
                    y_end = y0;
                  }
                }
              }
            }

            node_cont.append("ellipse")
              .attr("cx", x_end)
              .attr("cy", y_end)
              .attr("rx", 12)
              .attr("ry", 12)
              .attr("stroke", "white")
              .attr("stroke-width", 1)
              .attr("fill", cluster_dict[c].color)
              .attr("opacity", 1.0);

            branch_cont.append("line")
              .attr("x1", x_start)
              .attr("y1", y_start)
              .attr("x2", x_end)
              .attr("y2", y_end)
              .attr("stroke", cluster_dict[c].color)
              .attr("stroke-width", 15)
              .attr("opacity", 1.0)
              .attr("class", c);

            node_label_cont.append("text")
              .attr("font", "Arial")
              .attr("font-size", "14px")
              .attr("x", x_end)
              .attr("y", y_end + 4)
              .attr("text-anchor", "middle")
              .attr("fill", "white")
              .html(c.toString());

            branch_label_cont.append("text")
              .attr("font", "Arial")
              .attr("font-size", "10px")
              .attr("y", ((y_start + y_end) / 2) - (5 * cluster_dict[c].drivers.length + 5))
              .attr("text-anchor", "middle")
              .attr("font-weight", "bold")
              .selectAll("tspan")
              .data(["(" + Object.keys(cluster_dict[c].muts).length.toString() + ")", ...cluster_dict[c].drivers])
              .join("tspan")
                .attr("x", (x_start + x_end) / 2)
                .attr("dy", 10)
                .text(d => d);

            existing_nodes[c] = [x_end, y_end];
            existing_edges.push([x_start, y_start, x_end, y_end]);
            next_clusters.push(...child_dict[c]);
            i += 1;
            x_min = x_end < x_min ? x_end : x_min;
            y_min = y_end < y_min ? y_end : y_min;
            x_max = x_end > x_max ? x_end : x_max;
            y_max = y_end > y_max ? y_end : y_max;

          }

          svg_tree.attr("viewBox", (x_min - 50).toString() + "," + (y_min - 50).toString() + "," + (x_max - x_min + 100).toString() + "," + (y_max - y_min + 100).toString());

          this._elements.tooltip = svg_tree.append("g")
            .attr("style", "display: none;")
            .node();

          this._elements.svg_tree = svg_tree.node();

          this._refresh();

          d3.select(this.element.context.parentElement).append("button")
            .attr("onclick", "$(\"#tree\").tree(\"download\")")
            .attr("style", "font-size: 12px;")
            .html("Download as SVG")
        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.svg_tree.outerHTML;
        },

        toggle_mutations: function(eve) {
          if (typeof eve.target.getAttribute("class") === "string") {
            let branch = eve.target,
              tooltip = d3.select(this._elements.tooltip),
              cluster_dict = this.options.cluster_dict,
              x0 = (parseFloat(branch.getAttribute("x1")) + parseFloat(branch.getAttribute("x2"))) / 2,
              y0 = (parseFloat(branch.getAttribute("y1")) + parseFloat(branch.getAttribute("y2"))) / 2;
            tooltip.attr("style", "display: block;")
              .attr("transform", "translate(" + x0.toString() + "," + y0.toString() + ")");

            let border = tooltip.selectAll("path")
              .data([null])
              .join("path")
                .attr("fill", "white")
                .attr("stroke", "black");

            tooltip.selectAll("text")
              .data([null])
              .join("text")
              .attr("id", "diff-muts")
              .attr("text-anchor", "middle")
              .call(t => t
                .selectAll("tspan")
                .data(Object.keys(cluster_dict[branch.getAttribute("class")].muts))
                .join("tspan")
                .attr("x", 0)
                .attr("dy", 10)
                .attr("font-size", "9px")
                .text(d => d));

            this._refresh();

            let {width: w, height: h} = $("#diff-muts")[0].getBBox();

            border.attr("d", "M" + (-w / 2 - 10).toString() + ",-5H-5l5,-5l5,5H" +
              (w / 2 + 10).toString() + "v" + (h + 15).toString() +
              "h-" + (w + 20).toString() + "z");

            this._refresh();
          } else if (eve.target.nodeName === "svg") {
            d3.select(this._elements.tooltip).attr("style", "display: none;");

            this._refresh();
          }
        },

        download: function() {
          let dl_link = "data:text/plain;charset=utf-8," + encodeURIComponent(this._elements.svg_tree.outerHTML.replace("viewbox", "viewBox")),
            dl = document.createElement("a");
          document.body.appendChild(dl);
          dl.setAttribute("href", dl_link);
          dl.setAttribute("download", "!!indiv_id" + ".tree.svg");
          dl.click();
        }

      });

      let tree_options = !!tree_options;

      if (tree_options) {
        $("#tree").tree(tree_options)
      } else {
        $("#tree").append("h3")
          .html("Run BuildTree to display tree")
      }

    });
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.treatment_plot", {

        options: {
          width: 500,
          height: 50,
          margins: {right: 50, left: 50},
          treatments: [],
          samples: [],
          treatment_color_map: {}
        },

        _elements: {
          treatment_plot: undefined,
          tooltip: undefined
        },

        _create: function() {
          const width = this.options.width,
            height = this.options.height,
            margins = this.options.margins,
            treatments = this.options.treatments,
            samples = this.options.samples,
            treatment_color_map = this.options.treatment_color_map;

          let t = d3.scaleLinear()
            .domain([Math.min(...samples), Math.max(...samples)])
            .range([margins.left, width - margins.right]);

          let xAxis = g => g
            .attr("transform", "translate(0 " + height.toString() + ")")
            .call(d3.axisBottom(t));

          let treatment_plot = d3.select(document.createElement("svg"))
            .attr("baseProfile", "full")
            .attr("viewBox", "0 0 " + width + " " + (height * 2))
            .attr("version", "1.1")
            .attr("xmlns", "http://www.w3.org/2000/svg")
            .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
            .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")
            .attr("overflow", "visible")
            .attr("onclick", "$(\"#treatment-plot\").treatment_plot(\"toggle_tx\", event)")
            .style("max-height", "100px");
          treatment_plot.append("g")
            .call(xAxis);

          for (let tx in treatments) {
            let tx_start = Math.max(treatments[tx].tx_start, samples[0]),
              tx_end = Math.min(treatments[tx].tx_end, samples[samples.length - 1]);
            if (tx_end > samples[0] && tx_start < samples[samples.length - 1]) {
              let color = treatment_color_map[treatments[tx].tx];
              treatment_plot.append("line")
                .attr("stroke", color)
                .attr("stroke-width", 10)
                .attr("x1", t(tx_start))
                .attr("x2", t(tx_end))
                .attr("y1", 25)
                .attr("y2", 25)
                .attr("opacity", 1.0)
                .attr("tx", treatments[tx].tx)
                .attr("style", "cursor: pointer;")
            }
          }

          for (let s in samples) {
            treatment_plot.append("line")
              .attr("stroke", "black")
              .attr("stroke-width", 1)
              .attr("x1", t(samples[s]))
              .attr("x2", t(samples[s]))
              .attr("y1", 10)
              .attr("y2", 40)
              .attr("opacity", 1.0);
          }

          this._elements.tooltip = treatment_plot.append("g")
            .attr("style", "display: none;")
            .node();
          this._elements.treatment_plot = treatment_plot.node();

          this._refresh()
        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.treatment_plot.outerHTML
        },

        toggle_tx: function(eve) {
          if (typeof eve.target.getAttribute("tx") === "string") {
            let tx_line = eve.target,
              tooltip = d3.select(this._elements.tooltip);
            let {x, width} = tx_line.getBBox(),
              tx_mid = x + (width / 2);
            tooltip.attr("style", "display: block;")
              .attr("transform", "translate(" + tx_mid.toString() + ",60)");

            let border = tooltip.selectAll("path")
              .data([null])
              .join("path")
                .attr("fill", "white")
                .attr("stroke", "black");

            tooltip.selectAll("text")
              .data([null])
              .join("text")
              .attr("id", "treatment-text")
              .attr("text-anchor", "middle")
              .call(t => t
                .selectAll("tspan")
                .data([tx_line.getAttribute("tx")])
                .join("tspan")
                .attr("x", 0)
                .attr("y", 0)
                .text(d => d));

            this._refresh();

            let {width: w, height: h} = $("#treatment-text")[0].getBBox();

            border.attr("d", "M" + (-w / 2 - 10).toString() + " " + (-h / 2 - 15).toString() + " H " +
              (w / 2 + 10).toString() + " V " + (h / 2 + 5).toString() + " H " + (-w / 2 - 10).toString() + " Z");
          } else {
            this._elements.tooltip.setAttribute("style", "display: none;");
          }

          this._refresh();
        }

      });

      let treatment_data = !!treatment_plot_options;

      if (treatment_data) {
        $("#treatment-plot").treatment_plot(treatment_data);
      }

    });
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.mutation_visual", {
        options: {
          cluster_dict: {1: {ccf_hat: [0], ccf_high: [0], ccf_low: [0], color: "green", muts: {}, drivers: []}},
          aliases: []
        },

        _elements: {
          mutation_visual: undefined
        },

        _create: function() {
          const cluster_dict = this.options.cluster_dict,
            aliases = this.options.aliases;
          let svg_visual = d3.select(document.createElement("svg"))
            .attr("baseProfile", "full")
            .attr("version", "1.1")
            .attr("xmlns", "http://www.w3.org/2000/svg")
            .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
            .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")
            .attr("overflow", "auto"),
            c_groups = [[], [], [], []],
            group_names = ["UNIVERSAL MUTATIONS", "OTHER COMMON MUTATIONS", "OTHER CLONAL", "SUBCLONAL"],
            group_min_lens = [200, 200, 150, 150];
          for (let c in cluster_dict) {
            let clonality = [];
            for (let s in cluster_dict[c].ccf_hat) {
              let cl = cluster_dict[c].ccf_hat[s];
              if (cl > 0.9) {
                clonality.push(1);
              } else if (cl > 0.1) {
                clonality.push(0.5);
              } else {
                clonality.push(0);
              }
            }
            if (clonality.every(v => v === 1)) {
              c_groups[0].push(c);
            } else if (clonality.reduce((p, a) => p + a) > 1) {
              c_groups[1].push(c);
            } else if (clonality.some(v => v === 1)) {
              c_groups[2].push(c);
            } else {
              c_groups[3].push(c);
            }
          }

          for (let a in aliases) {
            svg_visual.append("g")
              .attr("transform", "translate(15," + (a * 12 + 133).toString() + ")")
              .append("svg")
                .attr("width", "100px")
                .attr("height", "20px")
                .attr("x", 10)
                .attr("y", 10)
                .attr("stroke-width", 1)
                .attr("stroke", "black")
                .append("text")
                  .html(aliases[a])
                  .attr("font-size", "9px")
                  .attr("x", 10)
                  .attr("y", 10)
                  .attr("text-anchor", "start")
                  .attr("textLength", 50)
                  .attr("class", "samples");
          }

          let x_offset = 20,
            y_offset = 30,
            header_x_offset = 70;

          for (let g in c_groups) {
            if (c_groups[g].length) {
              let g_len = 0;
              for (let i in c_groups[g]) {
                let c = c_groups[g][i],
                  box_stroke = cluster_dict[c].color,
                  drivers = cluster_dict[c].drivers,
                  muts = cluster_dict[c].muts,
                  sorted_muts = Object.keys(muts).sort(function(a, b) {
                    if (drivers.includes(a) && drivers.includes(b)) {
                      return 0
                    }
                    if (drivers.includes(a)) {
                      return -1
                    }
                    if (drivers.includes(b)) {
                      return 1
                    }
                    return 0
                  });
                g_len += sorted_muts.length * 12;
                for (let ii in sorted_muts) {
                  let mut = sorted_muts[ii],
                    mut_group = svg_visual.append("g")
                    .attr("class", "mut_group"),
                    mut_suffix = mut.includes("_") ? mut.split("_")[1] : "p.A0A",
                    text_color = (mut_suffix.length > 3 && mut_suffix[2] === mut_suffix[mut_suffix.length - 1]) ? "gray" : "black",
                    text_weight = drivers.includes(mut) ? "bold" : "normal";
                  mut_group.append("g")
                    .attr("transform", "rotate(-75," + (x_offset + 53).toString() + ",145) " +
                      "translate(" + (x_offset + 53).toString() + ",145)")
                    .append("svg")
                      .attr("width", "100px")
                      .attr("height", "20px")
                      .attr("x", 10)
                      .attr("y", 10)
                      .append("text")
                        .html(mut)
                        .attr("font-size", "9px")
                        .attr("font-family", "Arial")
                        .attr("fill", text_color)
                        .attr("x", 10)
                        .attr("y", 10)
                        .attr("text-anchor", "start")
                        .attr("textLength", 70)
                        .attr("font-weight", text_weight)
                        .attr("class", "cluster_" + c.toString());
                  for (let a in aliases) {
                    let ccf_hat = cluster_dict[c].ccf_hat[a],
                      ccf_1d = muts[mut].ccf_hat[a],
                      box_color = ccf_1d < 0.1 ? "white" : cluster_dict[c].color,
                      box_size = ccf_hat * 9 + 1,
                      a_box_stroke = ccf_hat > 0.9 ? "red" : box_stroke;
                    mut_group.append("rect")
                      .attr("x", x_offset + 75 - (box_size / 2.0))
                      .attr("y", y_offset + 120 + (a * 12) - (box_size / 2.0))
                      .attr("width", box_size.toString() + "px")
                      .attr("height", box_size.toString() + "px")
                      .attr("stroke-width", 1)
                      .attr("stroke", a_box_stroke)
                      .attr("fill", box_color)
                      .attr("opacity", 0.8)
                      .attr("class", "cluster_" + c.toString());
                  }
                  x_offset += 12;
                }
              }
              svg_visual.append("g")
                .attr("transform", "translate(" + (20 + header_x_offset).toString() + ",30)")
                .append("svg")
                  .attr("width", g_len)
                  .attr("height", "20px")
                  .attr("x", 10)
                  .attr("y", 10)
                  .attr("stroke-width", 1)
                  .attr("stroke", "black")
                  .append("text")
                    .html(group_names[g])
                    .attr("font-size", g_len > group_min_lens[g] ? "12px" : "8px")
                    .attr("x", 10)
                    .attr("y", 10)
                    .attr("text-anchor", "start");
              header_x_offset += g_len + 8;
              x_offset += 10;
            }
          }
          svg_visual
            .attr("width", x_offset + 110)
            .attr("height", y_offset + 160 + (aliases.length * 12));
          this._elements.mutation_visual = svg_visual.node();

          this._refresh();
        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.mutation_visual.outerHTML;
        },

        download: function() {
          let dl_link = "data:text/plain;charset=utf-8," + encodeURIComponent(this._elements.mutation_visual.outerHTML),
            dl = document.createElement("a");
          document.body.appendChild(dl);
          dl.setAttribute("href", dl_link);
          dl.setAttribute("download", "!!indiv_id" + ".clonality_chart.svg");
          dl.click();
        }
      });

      $("#mutation-visual").mutation_visual(!!mutation_visual_options)
    });
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.cluster_table", {

        options: {
          aliases: [],
          cluster_dict: {1: {ccf_hat: [0], ccf_high: [0], ccf_low: [0], color: "green", muts: {}}},
        },

        _elements: {
          cluster_table: undefined,
          column_data: undefined,
          table_data: undefined,
          cluster_datatable: undefined
        },

        _create: function() {
          let aliases = this.options.aliases,
            cluster_dict = this.options.cluster_dict,
            table_el = d3.select(document.createElement("table"))
              .attr("id", "cluster_table")
              .attr("class", "hover"),
            col_width = Math.round(100 / (aliases.length + 1.3)),
            cluster_col_width = 100 - (aliases.length * col_width),
            columns = [{"data": "Cluster", "width": cluster_col_width.toString() + "%"}],
            col_list = ["Cluster"];
          for (let i in aliases) {
            columns.push({"data": aliases[i] + " CCF", "width": col_width.toString() + "%"});
            col_list.push(aliases[i] + " CCF");
          }
          table_el.append("thead")
            .selectAll("th")
            .data(col_list)
            .join("th")
            .text(d => d);
          let cluster_data = [];
          for (let c in cluster_dict) {
            let cluster_dat = {"Cluster": c};
            for (let i in aliases) {
              cluster_dat[aliases[i] + " CCF"] = cluster_dict[c].ccf_hat[i] + " (" + cluster_dict[c].ccf_low[i] + "-" + cluster_dict[c].ccf_high[i] + ")";
            }
            cluster_data.push(cluster_dat);
          }
          this._elements.cluster_table = table_el.node();
          this._elements.column_data = columns;
          this._elements.table_data = {"columns": columns,
            "data": cluster_data,
            "order": [[0, "asc"]],
            "paging": false,
            "bInfo": false,
            "createdRow": function(row, data, dataIndex) {
              $(row).css("color", cluster_dict[dataIndex + 1].color)
                .css("cursor", "pointer")
                .attr("id", "mutation_row_cluster " + (dataIndex + 1).toString())
            }};

          this._refresh();
        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.cluster_table.outerHTML;
          this._elements.cluster_datatable = $("#cluster_table").DataTable(this._elements.table_data);
          $("#cluster_table tbody").on("click", "tr", this.toggle_mutations(this));
          let search_input = $(".dataTables_filter input");
          search_input.unbind().bind("keyup", function(e) {
            if (search_input.val().length === 0) {
              for (let c in this.options.cluster_dict) {
                this.hide_mutations(c);
              }
            } else if (e.keyCode === 13) {
              for (let c in this.options.cluster_dict) {
                let cluster_table = this.show_mutations(c);
                cluster_table.search(search_input.val()).draw();
                if (cluster_table.page.info().recordsDisplay === 0) {
                  this.hide_mutations(c);
                }
              }
            }
          }
          .bind(this));
        },

        toggle_mutations: function(widg) {
          return function() {
            let row = widg._elements.cluster_datatable.row($(this));
            if (row.data()) {
              if (row.child.isShown()) {
                row.child.hide();
              } else {
                let c = row.data().Cluster,
                  cluster_muts = widg.options.cluster_dict[c].muts,
                  drivers = widg.options.cluster_dict[c].drivers,
                  color = widg.options.cluster_dict[c].color,
                  aliases = widg.options.aliases,
                  mut_data = [];
                for (let mut in cluster_muts) {
                  let mut_dat = {"is_driver": drivers.includes(mut) ? 0 : 1, "Cluster": mut};
                  for (let i in aliases) {
                    mut_dat[aliases[i] + " CCF"] = cluster_muts[mut].ccf_hat[i] + " (" + cluster_muts[mut].alt_cnt[i] + ":" + cluster_muts[mut].ref_cnt[i] + ")";
                  }
                  mut_data.push(mut_dat);
                }
                row.child("<table id=\"cluster_" + row.data().Cluster + "_table\" class=\"hover\"></table>").show();
                cluster_table = $("#cluster_" + row.data().Cluster + "_table").DataTable({
                  "columns": [{"data": "is_driver", "visible": false}].concat(widg._elements.column_data),
                  "data": mut_data,
                  "autoWidth": false,
                  "order": [[0, "asc"]],
                  "paging": false,
                  "scrollY": 320,
                  "scrollCollapse": true,
                  "createdRow": function(row, data) {
                    $(row).css("color", color);
                    if (data.is_driver === 0) {
                      $(row).css("font-weight", "bold");
                    }
                  }
                });
              }
            }
          }
        },

        show_mutations: function(cluster) {
          let row = this._elements.cluster_datatable.row(cluster - 1),
            cluster_table;
          if (~row.child.isShown()) {
            let cluster_muts = this.options.cluster_dict[cluster].muts,
              drivers = this.options.cluster_dict[cluster].drivers,
              color = this.options.cluster_dict[cluster].color,
              aliases = this.options.aliases,
              mut_data = [];
            for (let mut in cluster_muts) {
              let mut_dat = {"is_driver": drivers.includes(mut) ? 0 : 1, "Cluster": mut};
              for (let i in aliases) {
                mut_dat[aliases[i] + " CCF"] = cluster_muts[mut].ccf_hat[i] + " (" + cluster_muts[mut].alt_cnt[i] + ":" + cluster_muts[mut].ref_cnt[i] + ")";
              }
              mut_data.push(mut_dat);
            }
            row.child("<table id=\"cluster_" + cluster.toString() + "_table\" class=\"hover\"></table>").show();
            cluster_table = $("#cluster_" + cluster.toString() + "_table").DataTable({
              "columns": [{"data": "is_driver", "visible": false}].concat(this._elements.column_data),
              "data": mut_data,
              "autoWidth": false,
              "order": [[0, "asc"]],
              "paging": false,
              "scrollY": 320,
              "scrollCollapse": true,
              "createdRow": function(row, data) {
                $(row).css("color", color);
                if (data.is_driver === 0) {
                  $(row).css("font-weight", "bold");
                }
              }
            });
          } else {
            cluster_table = row.child.DataTable();
          }
          return cluster_table;
        },

        hide_mutations: function(cluster) {
          this._elements.cluster_datatable.row(cluster - 1).child.hide();
        }

      });

      $("#cluster-table").cluster_table(!!cluster_table_options)
    });
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.mutation_plot", {
        options: {
          xlabels: [],
          cluster_dict: {1: {ccf_hat: [0], ccf_high: [0], ccf_low: [0], line_width: 0, color: "green", drivers: []}},
          width: 500,
          height: 400,
          margins: {top: 20, right: 30, bottom: 35, left: 40}
        },

        _elements: {
          mutation_plot: undefined
        },

        _create: function() {
          const xlabels = this.options.xlabels,
            cluster_dict = this.options.cluster_dict,
            width = this.options.width,
            height = this.options.height,
            margins = this.options.margins;

          if (xlabels.length > 1) {
            let x = d3.scaleLinear()
              .domain([0, xlabels.length - 1])
              .range([margins.left, width - margins.right]);

            let y = d3.scaleLinear()
              .domain([0, 1])
              .range([height - margins.bottom, margins.top]);

            let xAxis = g => g
              .attr("transform", "translate(0 " + (height - margins.bottom).toString() + ")")
              .call(d3.axisBottom(x).tickValues([...Array(xlabels.length).keys()]).tickFormat(d => xlabels[d]));

            let yAxis = g => g
              .attr("transform", "translate(" + margins.left.toString() + " 0)")
              .call(d3.axisLeft(y));

            let line = d3.line()
              .x(d => x(d.x))
              .y(d => y(d.y));

            let mutation_plot = d3.select(document.createElement("svg"))
              .attr("baseProfile", "full")
              .attr("viewBox", "0 0 " + width + " " + height)
              .style("max-width", "500px")
              .style("min-width", "300px")
              .attr("version", "1.1")
              .attr("xmlns", "http://www.w3.org/2000/svg")
              .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
              .attr("xmlns:xlink", "http://www.w3.org/1999/xlink");
            mutation_plot.append("g")
              .call(xAxis);
            mutation_plot.append("g")
              .call(yAxis);
            mutation_plot.append("text")
              .attr("x", (width + margins.left - margins.right) / 2)
              .attr("y", height - 5)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("Samples");
            mutation_plot.append("text")
              .attr("transform", "rotate(-90 10 " + ((height + margins.top - margins.bottom) / 2).toString() + ")")
              .attr("x", 10)
              .attr("y", (height + margins.top - margins.bottom) / 2)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("CCF(x)");
            mutation_plot.append("text")
              .attr("x", width / 2)
              .attr("y", margins.top / 2)
              .attr("text-anchor", "middle")
              .style("font-size", "14px")
              .style("text-decoration", "underline")
              .text("Mutation plot");

            for (let cluster in cluster_dict) {
              let muts = cluster_dict[cluster].muts,
                color = cluster_dict[cluster].color;
              for (let mut in muts) {
                let ccf_hat = muts[mut].ccf_hat,
                  mutation_data = [];
                for (let sample in ccf_hat) {
                  mutation_data.push({
                    x: sample,
                    y: ccf_hat[sample]
                  });
                }
                mutation_plot.append("path")
                  .datum(mutation_data)
                  .attr("fill", "none")
                  .attr("stroke", color)
                  .attr("stroke-width", 3)
                  .attr("opacity", 0.3)
                  .attr("d", line);
              }
            }

            this._elements.mutation_plot = mutation_plot.node();
          } else {
            let max_bin = 0,
              n_bins;
            for (let c in cluster_dict) {
              for (let mut in cluster_dict[c].muts) {
                max_bin = Math.max(max_bin, ...cluster_dict[c].muts[mut].ccf_dist);
                n_bins = cluster_dict[c].muts[mut].ccf_dist.length
              }
            }
            let x = d3.scaleLinear()
              .domain([0, 1])
              .range([margins.left, width - margins.right]);

            let y = d3.scaleLinear()
              .domain([0, max_bin]).nice()
              .range([height - margins.bottom, margins.top]);

            let xAxis = g => g
              .attr("transform", "translate(0 " + (height - margins.bottom).toString() + ")")
              .call(d3.axisBottom(x));

            let yAxis = g => g
              .attr("transform", "translate(" + margins.left.toString() + " 0)")
              .call(d3.axisLeft(y));

            let plot_1d = d3.select(document.createElement("svg"))
              .attr("baseProfile", "full")
              .attr("viewBox", "0 0 " + width + " " + height)
              .style("max-width", "500px")
              .style("min-width", "300px")
              .attr("version", "1.1")
              .attr("xmlns", "http://www.w3.org/2000/svg")
              .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
              .attr("xmlns:xlink", "http://www.w3.org/1999/xlink");
            plot_1d.append("g")
              .call(xAxis);
            plot_1d.append("g")
              .call(yAxis);
            plot_1d.append("text")
              .attr("x", (width + margins.left - margins.right) / 2)
              .attr("y", height - 5)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("CCF(x)");
            plot_1d.append("text")
              .attr("transform", "rotate(-90 10 " + ((height + margins.top - margins.bottom) / 2).toString() + ")")
              .attr("x", 10)
              .attr("y", (height + margins.top - margins.bottom) / 2)
              .style("text-anchor", "middle")
              .attr("font-size", "10px")
              .text("Probability density");

            let zero_str = Array(n_bins).fill(0).reduce(
              (a, c, i) => a + " " + x((n_bins - i - 1) / (n_bins - 1)).toString() + "," + y(0).toString(), " "
            );

            for (let c in cluster_dict) {
              plot_1d.append("g")
                .selectAll("polygon")
                .data(Object.keys(cluster_dict[c].muts))
                .join("polygon")
                .attr("fill", cluster_dict[c].color)
                .attr("opacity", 0.05)
                .attr("stroke", "none")
                .attr("points", d =>
                  cluster_dict[c].muts[d].ccf_dist.reduce(
                    (a, c, i) => a + " " + x(i / (n_bins - 1)).toString() + "," + y(c).toString(), ""
                  ) + zero_str
                );
            }

            plot_1d.append("text")
              .attr("x", width / 2)
              .attr("y", margins.top / 2)
              .attr("text-anchor", "middle")
              .style("font-size", "14px")
              .style("text-decoration", "underline")
              .text("Mutation plot");

            this._elements.mutation_plot = plot_1d.node()
          }

          this._refresh();

        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.mutation_plot.outerHTML;
        },

        download: function() {
          let dl_link = "data:text/plain;charset=utf-8," + encodeURIComponent(this._elements.mutation_plot.outerHTML),
            dl = document.createElement("a");
          document.body.appendChild(dl);
          dl.setAttribute("href", dl_link);
          dl.setAttribute("download", "!!indiv_id" + ".mutation_plot.svg");
          dl.click();
        }
      });

      $("#mutation-plot").mutation_plot(!!mutation_plot_options)
    })
  </script>
  <script>
    $(function() {
      $.widget("PhylogicNDT_report.fish_plot", {
        options: {
          xlabels: [],
          time_points: [],
          tumor_sizes: [],
          cluster_dict: {1: {ccf_hat: [0], ccf_high: [0], ccf_low: [0], line_width: 0, color: "green", drivers: []}},
          child_dict: {},
          width: 500,
          height: 400,
          margins: {top: 20, right: 30, bottom: 35, left: 40}
        },

        _elements: {
          fish_plot: undefined
        },

        _create: function() {
          const xlabels = this.options.xlabels,
            time_points = this.options.time_points,
            tumor_sizes = this.options.tumor_sizes,
            cluster_dict = this.options.cluster_dict,
            child_dict = this.options.child_dict,
            width = this.options.width,
            height = this.options.height,
            margins = this.options.margins;

          let x = d3.scaleLinear()
            .domain([Math.min(...time_points), Math.max(...time_points)])
            .range([margins.left, width - margins.right]);

          let y = d3.scaleLinear()
            .domain([0, Math.max(...tumor_sizes)]).nice()
            .range([height - margins.bottom, margins.top]);

          let xAxis = g => g
            .attr("transform", "translate(0 " + (height - margins.bottom).toString() + ")")
            .call(d3.axisBottom(x));

          let yAxis = g => g
            .attr("transform", "translate(" + margins.left.toString() + " 0)")
            .call(d3.axisLeft(y));

          let h = [];
          for (let i in xlabels) {
            h.push(time_points[i] - time_points[i - 1]);
          }

          let weights_cache = {};

          let pchip = function(u, population, c) {
            if (u < time_points[0] || u > time_points[time_points.length - 1]) {
              throw "Input outside interpolation range";
            }
            if (u === time_points[time_points.length - 1]) {
              return population[time_points.length - 1]
            }
            let n;
            for (n in time_points) {
              if (time_points[n] > u) {
                n = parseInt(n);
                break;
              }
            }
            weights_cache[c] = weights_cache[c] || {};
            let p0, p1, fp0, fp1;
            if (weights_cache[c][n]) {
              p0 = weights_cache[c][n].p0;
              p1 = weights_cache[c][n].p1;
              fp0 = weights_cache[c][n].fp0;
              fp1 = weights_cache[c][n].fp1;
            } else {
              p0 = population[n - 1];
              p1 = population[n];
              let d0 = (p0 - population[n - 2]) / h[n - 1],
                d1 = (p1 - p0) / h[n],
                d2 = (population[n + 1] - p1) / h[n + 1];
              fp0 = n === 1 ? d1 : (d0 + d1) / 2;
              fp1 = n === xlabels.length - 1 ? d1 : (d1 + d2) / 2;
              weights_cache[c][n] = {p0: p0, p1: p1, fp0: fp0, fp1: fp1};
            }
            let v = (u - time_points[n - 1]) / (time_points[n] - time_points[n - 1]);
            return (p0 * ((2 * v * v * v) - (3 * v * v) + 1)) +
              (p1 * ((-2 * v * v * v) + (3 * v * v))) +
              (fp0 * ((v * v * v) - (2 * v * v) + v)) +
              (fp1 * ((v * v * v) - (v * v)))
          };

          let getOrder = function(cluster, level) {
            cluster = cluster || child_dict[null][0];
            level = level || 1;
            let order = [cluster],
              breaks = {},
              children = child_dict[cluster];
            for (let i in children) {
              let {order: child_order, breaks: child_breaks, level: child_level} = getOrder(children[i], level + 1);
              order = [...order, ...child_order];
              breaks[children[i]] = children.length > 1 ? child_level : false;
              breaks = Object.assign({}, breaks, child_breaks);
            }
            return {order: order, breaks: breaks, level: level}
          };

          let {order, breaks} = getOrder(),
            max_break = Math.max(...Object.values(breaks));

          let fish_plot = d3.select(document.createElement("svg"))
            .attr("baseProfile", "full")
            .attr("viewBox", "0 0 " + width + " " + height)
            .style("max-width", "500px")
            .style("min-width", "300px")
            .attr("version", "1.1")
            .attr("xmlns", "http://www.w3.org/2000/svg")
            .attr("xmlns:ev", "http://www.w3.org/2001/xml-events")
            .attr("xmlns:xlink", "http://www.w3.org/1999/xlink");
          fish_plot.append("g")
            .call(xAxis);
          fish_plot.append("g")
            .call(yAxis);
          fish_plot.append("text")
            .attr("x", (width + margins.left - margins.right) / 2)
            .attr("y", height - 5)
            .style("text-anchor", "middle")
            .attr("font-size", "10px")
            .text("Time");
          fish_plot.append("text")
            .attr("transform", "rotate(-90 10 " + ((height + margins.top - margins.bottom) / 2).toString() + ")")
            .attr("x", 10)
            .attr("y", (height + margins.top - margins.bottom) / 2)
            .style("text-anchor", "middle")
            .attr("font-size", "10px")
            .text("Relative size");
          fish_plot.append("text")
            .attr("x", width / 2)
            .attr("y", margins.top / 2)
            .attr("text-anchor", "middle")
            .style("font-size", "14px")
            .style("text-decoration", "underline")
            .text("Tumor abundance plot");

          let t0 = time_points[0],
            linspace = [t0],
            step = (time_points[time_points.length - 1] - t0) / 100;
          for (let i = 1; i < 101; i++) {
            linspace.push(i * step + t0);
          }

          let abundance_stack = Array(101).fill(0);

          for (let o in order) {
            let cluster = order[order.length - o - 1],
              unique_population = child_dict[cluster].reduce(
                (a, c) => a.map((d, i) => d - cluster_dict[c].tumor_abundance[i]), cluster_dict[cluster].tumor_abundance
              ),
              base = [],
              head = [];
            for (let i in linspace) {
              base.push(x(linspace[i]) + "," + y(abundance_stack[i]));
              abundance_stack[i] += pchip(linspace[i], unique_population, cluster);
              head.push(x(linspace[i]) + "," + y(abundance_stack[i]));
            }
            fish_plot.append("path")
              .datum(linspace)
              .attr("stroke", cluster_dict[cluster].color)
              .attr("stroke-width", breaks[cluster] ? max_break - breaks[cluster] + 1 : 0)
              .attr("stroke-dasharray", 4)
              .attr("fill", "none")
              .attr("opacity", 1.0)
              .attr("d", d3.line()
                .x(d => x(d))
                .y((d, i) => y(abundance_stack[i])));

            fish_plot.append("polygon")
              .attr("points", head.join(" ") + " " + base.reverse().join(" "))
              .attr("fill", cluster_dict[cluster].color)
              .attr("opacity", 0.5)
              .attr("stroke", "none");
          }
          fish_plot.append("g")
            .selectAll("line")
            .data(time_points)
            .join("line")
            .attr("x1", d => x(d))
            .attr("y1", y.range()[0])
            .attr("x2", d => x(d))
            .attr("y2", y.range()["length"] + margins.top)
            .attr("stroke", "black")
            .attr("stroke-width", 1)
            .attr("stroke-dasharray", "1 4");

          this._elements.fish_plot = fish_plot.node();

          this._refresh();

          d3.select(this.element.context.parentElement).append("button")
            .attr("onclick", "$(\"#fish-plot\").fish_plot(\"download\")")
            .attr("style", "font-size: 12px;")
            .html("Download as SVG")

        },

        _refresh: function() {
          this.element.context.innerHTML = this._elements.fish_plot.outerHTML;
        },

        download: function() {
          let dl_link = "data:text/plain;charset=utf-8," + encodeURIComponent(this._elements.fish_plot.outerHTML),
            dl = document.createElement("a");
          document.body.appendChild(dl);
          dl.setAttribute("href", dl_link);
          dl.setAttribute("download", "!!indiv_id" + ".tumor_abundance_plot.svg");
          dl.click();
        }
      });

      let fish_options = !!fish_plot_options;

      if (fish_options) {
        $("#fish-plot").fish_plot(fish_options)
      }
    })
  </script>
  <style>
    .active-sample:hover {
      background-color: #f0f0f0;
    }

    .removed-sample {
      background-color: gray;
    }
  </style>
</head>

<body>
  <main>
    <div class="container-fluid">
      <div class="row">
        <h2 class="ml-3" >Phylogic Results - !!indiv_id</h2>
      </div>
      <div class="card">
        <div id="headingOne" class="card-header">
          <h5 class="mb-0">
            <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
              Clustering plot/tree
            </button>
          </h5>
        </div>
        <div id="collapseOne" class="collapse show" aria-labelledby="headingOne">
          <div class="card-body" style="overflow-x: scroll">
            <div class="row">
              <div id="sample-name-table" style="max-height: 600px; width: 25%; padding-right: 30px; overflow-y: scroll; display: table-cell">
              </div><div class="border-right" style="overflow-x: scroll; overflow-y: hidden; width: 45%; padding-right: 30px; display: table-cell">
                <div style="min-width: 450px">
                  <div style="display: inline-block; width: 84%; vertical-align: top">
                    <div id="clustering-plot"></div>
                    <div id="treatment-plot"></div>
                    <button onclick="$('#clustering-plot').clustering_plot('download')" style="font-size: 12px">Download as SVG</button>
                  </div><div style="display: inline-block; width: 16%; vertical-align: top">
                    <div id="time-switch"></div>
                    <div id="cluster-switches" style="overflow-y: scroll; overflow-x: hidden"></div>
                  </div>
                </div>
              </div><div style="width: 30%">
                <div id="tree" style="display: table-cell; overflow: scroll"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="card">
        <div id="headingTwo" class="card-header">
          <h5 class="mb-0">
            <button class="btn btn-link" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
              Clonality chart
            </button>
          </h5>
        </div>
        <div id="collapseTwo" class="collapse show" aria-labelledby="headingTwo">
          <div class="card-body">
            <div class="row">
              <div id="mutation-visual" class="col-md-12 overflow-auto"></div>
              <button onclick="$('#mutation-visual').mutation_visual('download')" style="font-size: 12px">Download as SVG</button>
            </div>
          </div>
        </div>
      </div>
      <div class="card">
        <div id="headingThree" class="card-header">
          <h5 class="mb-0">
            <button class="btn btn-link" data-toggle="collapse" data-target="#collapseThree" aria-expanded="true" aria-controls="collapseThree">
              Mutation table
            </button>
          </h5>
        </div>
        <div id="collapseThree" class="collapse show" aria-labelledby="headingThree">
          <div class="card-body">
            <div class="row">
              <div id="cluster-table" class="col-md-12 overflow-auto"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="card">
        <div id="headingFour" class="card-header">
          <h5 class="mb-0">
            <button class="btn btn-link" data-toggle="collapse" data-target="#collapseFour" aria-expanded="true" aria-controls="collapseFour">
              Other plots
            </button>
          </h5>
        </div>
        <div id="collapseFour" class="collapse show" aria-labelledby="headingFour">
          <div class="card-body">
            <div class="row">
              <div class="col-md-6 text-center">
                <div id="mutation-plot" style="overflow-x:scroll"></div>
                <button onclick="$('#mutation-plot').mutation_plot('download')" style="font-size: 12px">Download as SVG</button>
              </div>
              <div class="col-md-6 text-center" style="overflow-x:scroll">
                <div id="fish-plot"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="row" style="padding-bottom: 50px"></div>
    </div>
  </main>
</body>
</html>